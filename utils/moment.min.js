/**
 * 格式化时间
 * @param  {Datetime} source 时间对象
 * @param  {String} format 格式
 * @return {String}        格式化过后的时间
 */
const formatTime = date => {
  const year = date.getFullYear()
  const month = date.getMonth() + 1
  const day = date.getDate()
  const hour = date.getHours()
  const minute = date.getMinutes()
  const second = date.getSeconds()

  return [year, month, day].map(formatNumber).join('-') + ' ' + [hour, minute, second].map(formatNumber).join(':')
}

const formatNumber = n => {
  n = n.toString()
  return n[1] ? n : '0' + n
}

const formatTimeM = date => {
  const month = date.getMonth() + 1
  const day = date.getDate()
  const hour = date.getHours()
  const minute = date.getMinutes()

  return [month, day].map(formatNumber).join('-') + ' ' + [hour, minute].map(formatNumber).join(':')
}

// 'yyyy-MM-dd hh:mm:ss'
const formatDate = (date, fmt) => {
  if (/(y+)/.test(fmt)) {
    fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
  }
  let o = {
    'M+': date.getMonth() + 1,
    'd+': date.getDate(),
    'h+': date.getHours(),
    'm+': date.getMinutes(),
    's+': date.getSeconds()
  };

  // 遍历这个对象
  for (let k in o) {
    if (new RegExp(`(${k})`).test(fmt)) {
      let str = o[k] + '';
      fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? str : formatNumber(str));
    }
  }
  return fmt;
};


// 获取链接后的参数
const getQueryString = (url, name) => {
  let reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
  let r = url.split('?')[1].match(reg);
  if (!!r) return unescape(r[2]);
  return '';
}



// 刷拼多多数据
const formatPddData = function(data) {
  let that = this
  let goodsInfo = data || {};
  if (!!goodsInfo.goods_id) {
    let share_ratio = !!wx.getStorageSync('userInfoSaas').mfhy_uid ? wx.getStorageSync('OEM_info').share_ratio || 0 : 0;
    let price = goodsInfo.min_group_price - goodsInfo.coupon_discount;
    let C_price = price * goodsInfo.promotion_rate;

    // 原价
    goodsInfo.source_price = (goodsInfo.min_group_price / 100).toFixed(2);

    // 优惠券
    goodsInfo.coupon_discount = Number(goodsInfo.coupon_discount / 100);

    // 现价格
    goodsInfo.min_group_price = (price / 100).toFixed(2);
    let arr1 = goodsInfo.min_group_price.split('.');
    goodsInfo.min_group_price1 = arr1[0];
    goodsInfo.min_group_price2 = arr1[1];

    // 优惠券时间
    goodsInfo.coupon_start_time = formatDate(new Date(Number(goodsInfo.coupon_start_time) * 1000), 'MM.dd');
    goodsInfo.coupon_end_time = formatDate(new Date(Number(goodsInfo.coupon_end_time) * 1000), 'MM.dd');
    // 预估收入
    goodsInfo.share_price = ((C_price * share_ratio) / 100000).toFixed(2);
    // 京东 90%
    if (goodsInfo.type == 3) {
      goodsInfo.share_price = (goodsInfo.share_price * 0.9).toFixed(2);
    }
    // 分享参数
    if (!!wx.getStorageSync('uid')) {
      if (goodsInfo.type == 3) {
        goodsInfo.shareTitle = `【京东】券后￥${goodsInfo.min_group_price}  原价￥${goodsInfo.source_price}  限量❗️${goodsInfo.coupon_discount}元优惠券`;
        goodsInfo.sharePath = `/pages/goodsIntro/goodsIntro?goodsId=${goodsInfo.goods_id}&shareUid=${wx.getStorageSync('uid')}&supply=${goodsInfo.type}`;
      } else {
        goodsInfo.shareTitle = `【拼多多】券后￥${goodsInfo.min_group_price}  原价￥${goodsInfo.source_price}  限量❗️${goodsInfo.coupon_discount}元优惠券`;
        goodsInfo.sharePath = `/pages/goodsIntro/goodsIntro?goodsId=${goodsInfo.goods_id}&shareUid=${wx.getStorageSync('uid')}&supply=1`;
      }
    }
    return goodsInfo
  }
}

module.exports = {
  formatTime: formatTime,
  formatTimeM: formatTimeM,
  getQueryString: getQueryString,
  formatDate: formatDate,
  formatPddData
}